package main

import (
	"fmt"
	"os"
	"strings"
	"text/template"
)

var (
	types    = os.Getenv("TYPES")
	versions = os.Getenv("VERSIONS")

	makefile = `# DO NOT EDIT
# This file is autogenerated by build-tools/main.go

all: .boilerplate {{ .Paths }}

{{ .Paths }}:
{{"\t"}}./code-generator/generate-groups.sh all v1alpha1 anglo-korean.github.io/crd {{ .VersionTypes }} --go-header-file $< --output-base .
`
)

type tmpl struct {
	VersionTypes string
	Paths        string
	Deps         string
}

func main() {
	t := tmpl{}

	for _, v := range strings.Split(versions, ",") {
		for _, ty := range strings.Split(types, ",") {
			t.VersionTypes = fmt.Sprintf("%s %s:%s", t.VersionTypes, v, ty)
			t.Paths = fmt.Sprintf("%s %s/clientset/versioned/typed/%s/%s/%s.go", t.Paths, v, ty, v, ty)
			t.Deps = fmt.Sprintf("%s/%s/%s.go", ty, v, ty)
		}
	}

	f, err := os.Create("Makefile")
	if err != nil {
		panic(err)
	}

	defer f.Close()

	tpl := template.Must(template.New("makefile").Parse(makefile))

	err = tpl.Execute(f, t)
	if err != nil {
		panic(err)
	}
}
